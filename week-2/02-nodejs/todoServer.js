/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();
  
  app.use(bodyParser.json());

  const data = [];

  app.get('/todos', (req, res) => {
    res.json(data);
  });

  app.get('/todos/:id', (req,res) =>{
    let id = parseInt(req.params.id);
    // console.log(id);
    let ind = data.findIndex(value => id === value.id);

    //*** or write it like this [let ind = data.findIndex((value) =>{return id === value.id});] ***

    if(ind != -1) {
      res.status(200).json(data[ind]);
    } else {
      res.status(404).json({error : "404 not found"});
    }
  })
  
  app.post('/todos', (req,res) =>{
      let todoList = req.body;
      let id = Math.floor(Math.random()*1000);
      todoList.id = id;
      data.push(todoList);
      res.status(201).json({"id" : id});
      // console.log(data);
  })

  app.put('/todos/:id', (req,res) =>{
    let todoList = req.body;
    let id = parseInt(req.params.id);
    let ind = data.findIndex(value => id === value.id);
    if(ind !=-1) {
      todoList.id = id;
      data[ind] = todoList;
      res.status(200).send('updated succuesfully');
    } else {
      res.status(404).send('error found');
    }
  })
  
  app.delete('/todos/:id', (req,res) =>{
    let id = parseInt(req.params.id);
    let ind = data.findIndex(value => id === value.id);
    // console.log(ind);
    if(ind !=-1) {
      data.splice(ind,1);
      res.status(200).send('deleted succesfully');
    } else {
      res.status(404).send('error found');
    }
  })

  app.all('*', (req, body)=>{
    res.status(404).send('error found');
  })  

  app.listen(3001, ()=>{console.log('listening on port 3001')});
  
  module.exports = app;